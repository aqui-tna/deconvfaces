{
  "name": "aqui-tna/deconvfaces",
  "url": "https://github.com/aqui-tna/deconvfaces",
  "python_version": "3",
  "requirements": {
    "req_file": "requirements.txt",
    "pip": [
      "torch",
      "dask",
      "decorator",
      "h5py",
      "Keras",
      "networkx",
      "numpy",
      "olefile",
      "Pillow",
      "PyYAML",
      "scikit-image",
      "scipy",
      "six",
      "Theano",
      "toolz",
      "tqdm"
    ],
    "others": [
    ]
  },
  "to_run": {
      "decision": false,
      "reason": "Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output"
  },
  "entries": [
      {
        "cmd": "python3 faces.py train path/to/data",
        "main": "python3 faces.py",
        "steps": [
            "To train a new model"
        ],
        "args_lib": "library used to parse arguments. Ex argparse or unknown",
        "args": [],
        "ins": [
            {
            "type": "dir or file",
            "location": "path to the location of the file or folder",
            "artifact": "artifact type of the element: dataset,conf,metrics",
            "ex_from": "Tells how the artifact was loaded to the project: either cmd (if loaded using arg from command line), manual (if hardcoded in the code), conf (from configuration file) or unknown",
            "ex_in_repo": true
            }
        ],
        "outs": [
            {
                "type": "dir or file",
                "location": "path to the location of the file or folder",
                "artifact": "artifact type of the element: dataset,conf,metrics",
                "ex_from": "Tells how the artifact name was procided either cmd (if loaded using arg from command line), manual (if hardcoded in the code), conf (from configuration file) or unknown",
                "ex_in_repo": true
            }
        ]
        },
        {
          "cmd": "python3 faces.py generate -m path/to/model -o output/directory -f path/to/params.yaml",
          "main": "python3 faces.py",
          "steps": [
              "To train a new model"
          ],
          "args_lib": "library used to parse arguments. Ex argparse or unknown",
          "args": [],
          "ins": [
              {
              "type": "file",
              "location": "path/to/model",
              "artifact": "model",
              "ex_from": "params directory, which should give you a good idea of how to format these and what's available.",
              "ex_in_repo": true
              }
          ],
          "outs": [
              {
                  "type": "file",
                  "location": "output/directory",
                  "artifact": "params.yaml",
                  "ex_from": "params directory, which should give you a good idea of how to format these and what's available.",
                  "ex_in_repo": true
              }
          ]
          }
    ],
  "ex_metrics": {
    "metrics_files": [
        {
            "file_name": "faces.py",
            "metrics": ["cmd_fns","cmd_names","cmd_dict"]
        }
    ],
    "prints": ["cmd_fns","cmd_names","cmd_dict"],
    "plots": ["unknown"],
    "others": [
        {
            "name": "method name",
            "in_repo": ["unknown"],
            "metrics": ["unknown"]
        }
    ]
  },
  "ex_hyperparams": {
    "from_cmd": ["List of metrics read from cmd line"],
    "config_files": [
        {
            "name": "filename of the file where the hyperparameters are stored",
            "in_repo": "true if the file is in the repo, false if not",
            "hyperparams": ["single","random","drunk","interpolate"]
        }
    ],
    "in_code": [
      "List of hyperparams manually specified in code"
    ],
    "others": [
        {
            "name": ["unknown"],
            "metrics": ["unknown"]
        }
    ]
  }
}